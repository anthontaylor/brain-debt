// Code generated by MockGen. DO NOT EDIT.
// Source: service.go

// Package mock_topic is a generated GoMock package.
package mock_topic

import (
	brain "github.com/anthontaylor/brain-debt"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockService is a mock of Service interface
type MockService struct {
	ctrl     *gomock.Controller
	recorder *MockServiceMockRecorder
}

// MockServiceMockRecorder is the mock recorder for MockService
type MockServiceMockRecorder struct {
	mock *MockService
}

// NewMockService creates a new mock instance
func NewMockService(ctrl *gomock.Controller) *MockService {
	mock := &MockService{ctrl: ctrl}
	mock.recorder = &MockServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockService) EXPECT() *MockServiceMockRecorder {
	return m.recorder
}

// Add mocks base method
func (m *MockService) Add(id *brain.UserID, tName string) (*brain.TopicID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Add", id, tName)
	ret0, _ := ret[0].(*brain.TopicID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Add indicates an expected call of Add
func (mr *MockServiceMockRecorder) Add(id, tName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Add", reflect.TypeOf((*MockService)(nil).Add), id, tName)
}

// Get mocks base method
func (m *MockService) Get(id *brain.UserID) ([]brain.Topic, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", id)
	ret0, _ := ret[0].([]brain.Topic)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get
func (mr *MockServiceMockRecorder) Get(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockService)(nil).Get), id)
}

// Update mocks base method
func (m *MockService) Update(id *brain.UserID, topic *brain.Topic) (*brain.Topic, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", id, topic)
	ret0, _ := ret[0].(*brain.Topic)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update
func (mr *MockServiceMockRecorder) Update(id, topic interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockService)(nil).Update), id, topic)
}

// Delete mocks base method
func (m *MockService) Delete(id *brain.UserID, topicID *brain.TopicID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", id, topicID)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete
func (mr *MockServiceMockRecorder) Delete(id, topicID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockService)(nil).Delete), id, topicID)
}
